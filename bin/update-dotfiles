#!/bin/bash
set -e

# {{{
# Print the progress and heading
PROGRESS=0
PROGRESS_TOTAL=6
progress() {
    PROGRESS=$(($PROGRESS + 1))
    echo -e "\033[0;32m[$PROGRESS/$PROGRESS_TOTAL] $1\033[0;0m"
}

# Print a command and then run it
print_run() {
    echo -e "\033[0;36m>> $1\033[0;0m"
    eval "$1"
}

mkdir -p ~/dotfiles/tools
PATH="~/bin:~/dotfiles/bin:$PATH"
# }}}
# Check for our dependencies {{{
progress "Checking for dependencies"

command -v find >/dev/null || {
	echo "Please install find"
	depExit=1
}

command -v git >/dev/null || {
	echo "Please install git"
	depExit=1
}

if [ ! -z "$depExit" ]; then
	exit 1
fi
# }}}
# Update repo and tmp {{{
progress "Pulling"
if [ -z "$NO_PULL" ]; then
	cd ~/dotfiles
	current_revision="$(sha1sum bin/update-dotfiles)"
	print_run "git checkout -f master"
	print_run "git pull"
	chmod +x ~/dotfiles/bin/*
	
	if [ "$current_revision" != "$(sha1sum bin/update-dotfiles)" ]; then
		exec ~/dotfiles/bin/update-dotfiles
	fi
	
	if [ -d .tmux/plugins/tpm ]; then
		pushd .tmux/plugins/tpm
		print_run "git checkout master"
		print_run "git pull"
		popd
	else
		print_run "git clone https://github.com/tmux-plugins/tpm .tmux/plugins/tpm"
	fi
else
	echo "Not pulling because the env var NO_PULL is set"
fi
# }}}
# Install links {{{
cd ~/dotfiles
progress "Installing symlinks"

KEEP_DOTFILES=1 ~/dotfiles/bin/cleanup-dotfiles >/dev/null

for file in $(ls -1a | tail -n $(($(ls -1a | wc -l) - 2)) | fgrep -v .git | fgrep -v bin | fgrep -v README.md | fgrep -v tools); do
    if [ -f ~/$file ]; then
        print_run "mv ~/$file ~/$file.bak"
    fi

    ln -s ~/dotfiles/$file ~/$file
done

mkdir -p ~/bin

rm ~/bashrc
[ -h ~/.bashrc ] && rm ~/.bashrc
[ -f ~/.bashrc ] || echo "source ~/dotfiles/bashrc" >~/.bashrc
# }}}
# Install app plugins {{{
progress "Installing app plugins"

if ! command -v tmux >/dev/null && command -v make >/dev/null && command -v cc >/dev/null && command -v cpp >/dev/null; then
	BUILD_TMUX=1
fi

# Configure nvim to use the vim config
rm -f ~/.local/share/nvim/site/.vim
mkdir -p ~/.local/share/nvim/site/
ln -s ~/.vim ~/.local/share/nvim/site/.vim

mkdir -p ~/.config/nvim
cat >~/.config/nvim/init.vim <<"EOF"
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
source ~/.vimrc
EOF

command -v wget >/dev/null && hasWget=1
command -v curl >/dev/null && hasCurl=1
plugReady=1

# Tmux build based on https://gist.github.com/ryin/3106801

cleanupTmux() {
	rm -rf tools/*.gz
	rm -rf tools/libevent-2.0.19-stable
	rm -rf tools/ncurses-6.1
	rm -rf tools/tmux-2.8/*.{c,o,h} tools/tmux-2.8/{etc,compat}
}
trap cleanupTmux EXIT

if [ ! -z "$hasWget" ]; then
	mkdir -p ~/.local/share/nvim/site/autoload
		wget -qO ~/.local/share/nvim/site/autoload/plug.vim \
	    	https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	
	if [ ! -z "$BUILD_TMUX" ]; then
		pushd ~/dotfiles/tools
		wget https://github.com/downloads/libevent/libevent/libevent-2.0.19-stable.tar.gz
		wget ftp://ftp.gnu.org/gnu/ncurses/ncurses-6.1.tar.gz
		wget https://github.com/tmux/tmux/releases/download/2.8/tmux-2.8.tar.gz
		popd
	fi
elif [ ! -z "$hasCurl" ]; then
	curl -s -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
			https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

	if [ ! -z "$BUILD_TMUX" ]; then
		pushd ~/dotfiles/tools
		curl https://github.com/downloads/libevent/libevent/libevent-2.0.19-stable.tar.gz >libevent-2.0.19-stable.tar.gz
		curl ftp://ftp.gnu.org/gnu/ncurses/ncurses-6.1.tar.gz >ncurses-6.1.tar.gz
		curl https://github.com/tmux/tmux/releases/download/2.8/tmux-2.8.tar.gz >tmux-2.8.tar.gz
		popd
	fi
else
	echo "Could not find curl or wget. skipping vim."
	unset plugReady
fi

if [ ! -z "$BUILD_TMUX" ]; then
	mkdir ~/dotfiles/tools/libs
	pushd ~/dotfiles/tools
	# Build libevent
	tar xvzf libevent-2.0.19-stable.tar.gz
	pushd libevent-2.0.19-stable
	./configure --prefix=$HOME/dotfiles/tools/libs --disable-shared
	make
	make install
	popd

	# Build ncurses
	tar xvzf ncurses-6.1.tar.gz
	pushd ncurses-6.1
	./configure --prefix=$HOME/dotfiles/tools/libs
	make
	make install
	popd

	# Build tmux
	tar xvzf tmux-2.8.tar.gz
	pushd tmux-2.8
	./configure CFLAGS="-I$HOME/dotfiles/tools/libs/include -I$HOME/dotfiles/tools/libs/include/ncurses" LDFLAGS="-L$HOME/dotfiles/tools/libs/lib -L$HOME/dotfiles/tools/libs/include/ncurses -L$HOME/dotfiles/tools/libs/include"
	CPPFLAGS="-I$HOME/dotfiles/tools/libs/include -I$HOME/dotfiles/tools/libs/include/ncurses" LDFLAGS="-static -L$HOME/dotfiles/tools/libs/include -L$HOME/dotfiles/tools/libs/include/ncurses -L$HOME/dotfiles/tools/libs/lib" make
	ln -s ~/dotfiles/tools/tmux-2.8/tmux ~/bin/tmux
	popd
	popd
fi

command -v tmux >/dev/null && {
	export TMUX_PLUGIN_MANAGER_PATH="$HOME/.tmux/plugins/"
	~/dotfiles/.tmux/plugins/tpm/scripts/install_plugins.sh
} || echo "Tmux not found. skipping."

if [ ! -z "$plugReady" ]; then
	nvim +PlugClean +PlugInstall +qall
fi
# }}}
# Configure git {{{
progress "Configure git"
git config --global alias.co checkout
git config --global alias.undo "reset --soft HEAD~1"
git config --global alias.lg "log --format=\"%C(yellow)%h%Creset %C(cyan)%an%Creset %s\""
git config --global alias.l1 "log -1 --format=\"%C(yellow)%h%Creset %C(cyan)%an%Creset %s\""
git config --global alias.tree "log --format=\"%C(yellow)%h%Creset %C(cyan)%an%Creset %s\" --graph --all"
git config --global alias.dewip '!~/dotfiles/bin/git-dewip'
# }}}
# Configure auto updates {{{
progress "Configuring auto update"
tmpFile="$(mktemp)"
crontab -l >$tmpFile 2>/dev/null || true

if [ "$(wc -l $tmpFile)" == "0" ]; then
	echo "# m h dom mon dow command" >$tmpFile
fi

# Remove old dotfiles rule
sed -i '/.*update-dotfiles.*/ d' $tmpFile

# Add new dotfiles rule
echo "30 3 * * * ~/dotfiles/bin/update-dotfiles" >> $tmpFile

cat $tmpFile | crontab -
rm $tmpFile
# }}}
