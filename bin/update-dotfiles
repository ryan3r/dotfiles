#!/bin/bash
set -e

# {{{
PGP_AUTH_KEY="919BBD41D76035D6D3B25E8BFB3254241470A5CC"
# Print the progress and heading
PROGRESS=0
PROGRESS_TOTAL=9
progress() {
    PROGRESS=$(($PROGRESS + 1))
    echo -e "\033[0;32m[$PROGRESS/$PROGRESS_TOTAL] $1\033[0;0m"
}

# Determine which package manager this system uses
package_manager() {
    for manager in "apt-get"; do
        command -v $manager >/dev/null && {
            echo $manager
            return
        }
    done
}

# Show the install message
install_msg() {
    echo "The following programs are required $DEPS_NEEDED"
    
    if [ "$1" == "-r" ]; then
        echo "Either install them manually and run ~/dotfiles/update or run ~/dotfiles/update as root"
    else
        echo "Install them manually and run ~/dotfiles/update"
    fi

    exit 1
}

# Print a command and then run it
print_run() {
    echo -e "\033[0;36m>> $1\033[0;0m"
    eval "$1"
}
# }}}
# Check for our dependencies {{{
DEPS_NEEDED=
progress "Checking for and installing dependencies"

for dep in "vim" "tmux" "find" "git" "gpg"; do
    command -v $dep >/dev/null || {
        if [ -z "$DEPS_NEEDED" ]; then
            DEPS_NEEDED="$dep"
        else
            DEPS_NEEDED="$DEPS_NEEDED, $dep"
        fi
    }
done

# Install deps if root or tell the user if to do it
if [ ! -z "$DEPS_NEEDED" ]; then
    if [ $EUID -eq 0 ]; then
        case "$(package_manager)" in
            apt-get)
                print_run "apt-get update"
                print_run "apt-get install -y $(echo $DEPS_NEEDED | sed 's/,//g')"
                ;;

            *)
                install_msg
                ;;
        esac
    else
        install_msg -r
    fi
fi

# Run the rest of the commands as the original user
if [ $SUDO_USER ] && [ $EUID -eq 0 ]; then
    echo -e "\033[0;0m>> su $SUDO_USER -c ~/dotfiles/bin/update-dotfiles"
    su $SUDO_USER -c ~/dotfiles/bin/update-dotfiles
    exit
fi
# }}}
# Update repo and submodules {{{
progress "Pulling"
cd ~/dotfiles
current_revision="$(sha1sum bin/update-dotfiles)"
print_run "git checkout -f master"
print_run "git pull"
chmod +x ~/dotfiles/bin/*

if [ "$current_revision" != "$(sha1sum bin/update-dotfiles)" ]; then
	exec ~/dotfiles/bin/update-dotfiles
fi

progress "Updating submodules"
print_run "git submodule init"
print_run "git submodule update"
# }}}
# Remove old symlinks {{{
progress "Removing old links"
cd ~
for link in $(find . -type l -not -path './dotfiles/*'); do
    if [ ! -z "$(readlink $link | fgrep dotfiles)" ]; then
        rm -rf $link
    fi
done
# }}}
# Install new links {{{
cd ~/dotfiles
progress "Installing symlinks"

for file in $(ls -1a | tail -n $(($(ls -1a | wc -l) - 2)) | fgrep -v .git | fgrep -v bin | fgrep -v README.md | fgrep -v crontab); do
    if [ -f ~/$file ]; then
        print_run "mv ~/$file ~/$file.bak"
    fi

    ln -s ~/dotfiles/$file ~/$file
done

mkdir -p ~/bin

for file in $(ls -1 bin); do
    if [ -f ~/bin/$file ]; then
        echo "Moving existing bin/$file to bin/$file.bak"
        mv ~/bin/$file ~/bin/$file.bak
    fi

    ln -s ~/dotfiles/bin/$file ~/bin/$file
done
# }}}
# Install app plugins {{{
progress "Installing tmux plugins"

export TMUX_PLUGIN_MANAGER_PATH="$HOME/.tmux/plugins/"
~/.tmux/plugins/tpm/scripts/install_plugins.sh

progress "Installing vim plugins"
vim +PluginInstall +qall 2>/dev/tty >/dev/tty </dev/tty
# }}}
# Setup gpg and ssh {{{
progress "Add public ssh key"

mkdir -p ~/.ssh

# Remove old ssh keys
if [ -f '~/.ssh/authorized_keys' ]; then
	sed -e 's/ssh-rsa [A-Za-z0-9+/=]* openpgp:0xE5441D5C//' -i ~/.ssh/authorized_keys
	sed -e 's/ssh-rsa [A-Za-z0-9+/=]* ryan314r@gmail.com//' -i ~/.ssh/authorized_keys
fi

print_run "curl -L https://ryan3r.com/ssh >> ~/.ssh/authorized_keys"
# }}}
# Setup cron {{{
progress "Setting up crontab"

command -v $manager >/dev/null || {
	CRONTMP=$(mktemp)
	echo "# From ~/dotfiles/crontab" > $CRONTMP
	cat ~/dotfiles/crontab | sed "s/{HOME}/$(echo $HOME | sed 's/\//\\\//g')/g" >> $CRONTMP

	if [ -f ~/.crontab ]; then
		echo "# From ~/.crontab" >> $CRONTMP
		cat ~/.crontab >> $CRONTMP
	fi

	cat $CRONTMP | crontab -
	rm $CRONTMP
}
# }}}
